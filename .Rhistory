source('~/WeChat Files/wxid_b28exhxa7mug22/FileStorage/File/2020-10/assignment 3 (draft) --MENG Fankun(1).R')
2+3-3*3/3^3
#Module(remainder):find the remainder of 2 over 3.
2%%3
#Integer division:find the quotient of 2 over 3.
2%/%3
#Integer division:find the quotient of 2 over 3.
2%/%3
#"Is 3 not equal to 0?" "TRUE"
3!=0
#Compare 3 OR 0.
3|0
#Compare 3 AND 0.
3&0
-2 & 5.0
!!-9
#Arithmetics
2+3-3*3/3^3
#Convert
as.integer(-3.3)
#Sequence
1:4
-3:-100
2.33:7
#mean
mean(x=1:5)
x
mean(x==1:5)
#x is not found.
mean((x=1:5))
x
mean(x<-4:8)
x
#mean
mean(x=1:5)
x
mean((x=1:5))
x
#mean
mean(x=1:5)
x
#mean
mean(x=1:5)
x
mean((x=1:5))
x
mean(x<-4:8)
x
#mean
mean(x=1:5)
x
mean((x=7:15))
x
mean(x<-4:8)
x
#mean
mean(x=1:5)
x
mean((x=7:15))
x
mean(x<-4:8)
x
source('~/WeChat Files/wxid_b28exhxa7mug22/FileStorage/File/2020-10/assignment 3 (draft) --MENG Fankun(1).R')
ls()
Part - Arithmetics
2+3-3*3/3^3
#Module(remainder):find the remainder of 2 over 3.
2%%3
#Remove all variables.
rm(list=ls())
#----------------------------------------------------
num_vector=c(1,2,3)
#----------------------------------------------------
my_vector=c(1,2,3)
#----------------------------------------------------
my_vector=c(1,2,3)
class(my_vector)
#Get the third data point in price.
price(22,33,44,55)
#Get the third data point in price.
price(c(22,33,44,55))
#Get the third data point in price.
price=(c(22,33,44,55))
#Get the third data point in myvariable.
myvariable=(c(22,33,44,55))
myvariable[3]
names(myvariable)=c("aaa","bbb","ccc","ddd")
myvariable[3]
#Give names to those data points.
names(myvariable)=c("aaa","bbb","ccc","ddd")
#Get the data point named "aaa".
myvariable["aaa"]
#Another method.
myvariable2=c(aa=11,bb=22,cc=33)
#Another method.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aaa",returns 22.
myvariable2[aa]
#Another method.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aa",returns 11.
myvariable2[aa]
#Another method.
myvariable2=c("aa"=11,"bb"=22,"cc"=33)
#Get the data point named "aa",returns 11.
myvariable2[aa]
#Get the data point named "aa",returns 11.
myvariable2["aa"]
#Another method.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aa",returns 11.
myvariable2["aa"]
#Vector arithmeticsã€‚
#
myvariable2=c(aa=11,bb=22,cc=33)
myvariable3=1000*myvariable2
myvariable3
myvariable4=myvariable+myvariable2
#Get the third data point in myvariable.
myvariable=(c(22,33,44,55))
myvariable[3]
#Give names to those data points.
names(myvariable)=c("aaa","bbb","ccc","ddd")
#Get the data point named "aaa",returns 22.
myvariable["aaa"]
#Another method to name a vector.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aa",returns 11.
myvariable2["aa"]
myvariable3=1000*myvariable2
myvariable4=myvariable+myvariable2
#Get the third data point in myvariable.
myvariable=(c(22,33,44))
myvariable[3]
#Give names to those data points.
names(myvariable)=c("aaa","bbb","ccc","ddd")
#Get the data point named "aaa",returns 22.
myvariable["aaa"]
#Another method to name a vector.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aa",returns 11.
myvariable2["aa"]
myvariable3=1000*myvariable2
myvariable4=myvariable+myvariable2
#Compare vectors by each data point.
c(1,2,3)>c(TRUE,NA,0)
#Assign names to vectors.
myvariable6=c("aa":"bb")
#Assign names to vectors.
myvariable6=c("aa":"dd")
#Assign names to vectors.
myvariable6=c("a","b","c","d","e")
names(myvariable5)=myvariable_name
#Assign names to vectors.
myvariable_name=c("a","b","c","d","e")
names(myvariable5)=myvariable_name
#Generate a numeric vector,from 1 to 100,five data points,don't repeat numbers.
myvariable5=sample(1:100,5,replace=FALSE)
#Assign names to vectors.
myvariable_name=c("a","b","c","d","e")
names(myvariable5)=myvariable_name
myvariable5
#Get the 4th, 5th, 8th elements.
myvariable2[c(4,5,8)]
#Find a named data point.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aa",returns 11.
myvariable2["aa"]
#Get the 4th, 5th, 8th elements.
myvariable2[c(4,5,8)]
#Find a named data point.
myvariable2=c(aa=11,bb=22,cc=33)
#Get the data point named "aa",returns 11.
myvariable2["aa"]
#Get the 4th, 5th, 8th elements.
myvariable2[c(4,5,8)]
#Get the 1st, 3rd elements.
myvariable2[c(1,3)]
#Get all elements except the 3rd.
myvariable2[-3]
myvariable2[c("aa","cc","bb")]
#Get the 1st, 3rd elements.
myvariable2[c(1,3)]
#Get all elements except the 3rd.(Only work for numeric)
myvariable2[-3]
#Only get the TRUE elements,i.e.1st only.
myvariable2[c(T,F,F)]
#-----------------------------------------------
#Part G - Matrix (2 dimensional)
#Create a matrix of 3 columns, fill the rows with data points 1 to 6 (horizontally fill)
matrix(1:6,ncol=3,byrow = T)
#Name rows and columns while creating matrix.
m_3=matrix(1:6,nrow=2,dimnames = list(c("r1","r2")),c("c1","c2","c3","c4")
m_3
m_3
#Name rows and columns while creating matrix.
m_3=matrix(1:6,nrow=2,dimnames = list(c("r1","r2")),c("c1","c2","c3","c4")
m_3
#Name rows and columns while creating matrix.
m_3=matrix(1:6,nrow=2,dimnames = list(c("r1","r2"),c("c1","c2","c3","c4")))
#Name rows and columns while creating matrix.
m_3=matrix(1:6,nrow=2,dimnames = list(c("r1","r2"),c("c1","c2","c3")))
m_3
#Get rows 2 to 3, columns 2nd and 4th.
m_3[2:3,c(2,4)]
#Get rows 2 to 3, columns 2nd and 3rd.
m_3[2:3,c(2,4)]
#Get element in 3rd column.
m_3[,3]
#Get the 4th data point (Counted vertically,start from 1st column)
m_3[4]
#Get rows 2 to 3, columns 2nd and 3rd.
m_3[2:3,c(2,4)]
#Get rows 2 to 3, columns 2nd and 3rd.
m_3[2:3,c(2,3)]
#Get rows 2 to 3, columns 2nd and 3rd.
m_3[2:3,c(2,3)]
m_3[4]+1
m_3
#elements times itself(squared)
x*x
#elements times itself(squared)
m_3*m_3
#Matrix multiplication
m_3 %*% m_2
#Matrix transpose - make it horizontal
t(m_3)
#----------------------------------------------
#Part H - Lists (support all types of data)
l_1=list("A+",4.3,"B",3.9)
str(l_1)
#Sequence from 1 to 4, interval is 1.
1:4
seq(1,4,by=1)
#Repeat 4 for three times.
rep(4,3)
#Indexing:get content of a list.Use double brackets.
l_1[[9467.3]]
#Indexing:get content of a list.Use double brackets.
[[9467.3]]
# Add new element in list. Use Dolloar sign $.
l_1$data5="B-"
l_1
#or
l_1[[data6]]=4.0
#or
l_1[["data6"]]=4.0
l_1
#Partial matching(no need to be exact)
#Find the value associated with the name "a5".
l_1[["a5",exact=FALSE]]
#Partial matching(no need to be exact)
#Find the value associated with the name "da".
l_1[["da",exact=FALSE]]
#Partial matching(no need to be exact)
#Find the value associated with the name "da".
l_1[["da",exact=FALSE]]
#Partial matching(no need to be exact)
#Find the value associated with the name "da".
l_1[["data6",exact=FALSE]]
#Partial matching(no need to be exact)
#Find the value associated with the name "da".
l_1[["data",exact=FALSE]]
#or
l_1[["data6"]]=4.0
#Partial matching(no need to be exact)
#Find the value associated with the name "da".
l_1[["data",exact=FALSE]]
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
# Clear packages
p_unload(dplyr, tidyr, stringr) # Clear specific packages
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
df=read.xlsx("all.xlsx")
library(caTools)
set.seed(2500)
split = sample.split(df$Security, SplitRatio=0.7)
Train = subset(df, split ==TRUE)
Test = subset(df, split ==FALSE)
nrow(Train)
nrow(Test)
df=read.xlsx("all.xlsx")
df = read.csv2("all.xlsx")
df <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
df <- read.table(file = "clipboard",
sep = "\t", header=TRUE)
install.packages("readxl")
library("readxl")
df <- read_excel("all.xls")
setwd("~/6. Data Intelligence Bootcademy")
install.packages("readxl")
library("readxl")
df <- read_excel("all.xls")
df <- read_excel("all.xlsx")
library(caTools)
set.seed(2500)
split = sample.split(df$Security, SplitRatio=0.7)
Train = subset(df, split ==TRUE)
Test = subset(df, split ==FALSE)
nrow(Train)
nrow(Test)
table(Test$Security)
library(caret)
library(e1071)
numFolds = trainControl(method = "cv", number = 5)
cpGrid = expand.grid(cp = seq(0.01,0.3,0.01))
Train$Security = as.factor(Train$Security)
Test$Security = as.factor(Test$Security)
result = train(Security ~ ., data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
result = train(Security ~ ., data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
source('~/WeChat Files/wxid_b28exhxa7mug22/FileStorage/File/2020-10/assignment 3 (draft) --MENG Fankun(1).R')
